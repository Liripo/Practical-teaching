stat = stat,
position = position,
params = list(na.rm=na.rm, ...),
show.legend = show.legend,
inherit.aes = inherit.aes)
}
ggplot(mtcars)+geom_star(aes(x = mpg,y = hp))
ggplot(mtcars)+ggstar::geom_star(aes(x = mpg,y = hp))
ggstar:::starGrob
ggstar::GeomStar
ggstar::GeomStar$draw_panel
ggplot2:GeomPoint
ggplot2::GeomPoint
ggplot2::GeomPoint$draw_panel
.pt
ggplot2::.pt
ggplot2:::.pt
ggplot2::.stroke
ggplot(mtcars)+ggforce::geom_circle(aes(x = mpg,y = hp))
ggplot(mtcars)+ggforce::geom_circle(aes(x0 = mpg,y0 = hp))
ggplot(mtcars)+ggforce::geom_circle(aes(x0 = mpg,y0 = hp,),r=0.5)
ggplot(mtcars)+ggforce::geom_circle(aes(x0 = mpg,y0 = hp,r = 0.5))
ggplot(mtcars)+ggforce::geom_circle(aes(x0 = mpg,y0 = hp,r = 5))
ggplot2:::GeomTile
ggplot2:::GeomTile$draw_panel
ggplot2:::GeomRaster$draw_panel
grid::rasterGrob
?shiny::tags$link()
??shiny::tags$link()
shiny::tags$link() %>% help()
remotes::install_github('JohnCoene/echarts4r.maps')
?new.env()
globalenv()
.GlobalEnv
f <- function() "top level function"
f
environment()
environment(f)
e <- new.env(parent = emptyenv())
e
assign(f,envir = e)
ls(envir = environment(stats::approxfun(1:2, 1:2, method = "const")))
assign("f",function(x){print(x)},envir = e)
remove(f)
f
ls(envir = e)
get(envir = e,"f")
e:::f
e::f
get(envir = e,"f") -> f
f
memory.size(f)
memory.size("f")
?memory.size
memory.size()
ggplot2:::`+.gg`()
ggplot2:::`+.gg`
glue::glue("aa")
glue::glue("aa{aa}",aa)
aa <- 1
glue::glue("aa{aa}",aa)
glue::glue("aa{a}",aa)
glue::glue("aa{aa}",aa)
aa <- "g"
glue::glue("aa{aa}",aa)
glue::glue("aa{}",aa)
?glue::glue
glue::glue("aa{aa}")
glue::glue("aa{{aa}}")
aa
aa[[1]]
{aa}
?fs::dir_ls
remotes::install_github("davidgohel/officedown")
library(officedown)
remotes::install_github("mlr-org/mlr3")
remotes::install_github("mlr-org/mlr3")
remotes::install_github("mlr-org/mlr3")
remotes::install_github("mlr-org/mlr3")
remotes::install_github("mlr-org/mlr3")
remotes::install_github("mlr-org/mlr3")
source('G:/liripo/R/Practical-teaching/app.R')
setwd("G:\\liripo\\R\\Practical-teaching")
source("R/global.R")
nCov2019::load_nCov2019()
covid_data <- nCov2019::load_nCov2019()
covid_data[]
covid_data <- nCov2019::get_nCov2019()
covid_data[]
covid_data$lang
?bs4DashControlbarItem
?bs4SidebarMenuItem
source('G:/liripo/R/Practical-teaching/app.R')
runApp()
?bs4DashNavbar
source('G:/liripo/R/Practical-teaching/app.R')
runApp()
?bs4SidebarHeader()
runApp()
runApp()
runApp()
runApp()
getNamespace("bs4Dash")
getNamespace("bs4Dash") %>% names()
getNamespace("bs4Dash") %>% names() %>% str_detect("Header")
getNamespace("bs4Dash") %>% names() %>% str_detect("Header") %>% which()
getNamespace("bs4Dash") %>% names() %>% str_match("Header")
getNamespace("bs4Dash") %>% names() %>% str_view_all("Header")
getNamespace("bs4Dash") %>% names() %>% str_view("Header")
getNamespace("bs4Dash") %>% names() %>% str_extract("Header")
getNamespace("bs4Dash") %>% names() %>% str_extract_all("Header")
getNamespace("bs4Dash") %>% names() %>% grep("Header")
?grep
getNamespace("bs4Dash") %>% names() %>% str_which("Header")
getNamespace("bs4Dash") %>% names() %>% .[76,87,139]
getNamespace("bs4Dash") %>% names() %>% .[c(76,87,139)]
?bs4DashSidebar()
?bs4DashNavbar
runApp()
runApp()
runApp()
shinydashboardPlus::shinydashboardPlusGallery()
install.packages("shinyjqui")
install.packages("shinyAce")
install.packages("styler")
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
devtools::install_github("GuangchuangYu/nCov2019")
devtools::install_github("GuangchuangYu/nCov2019")
covid_data <- nCov2019::get_nCov2019()
runApp()
runApp()
detach("package:base", unload = TRUE)
library(base)
runApp()
?observeEvent
shinyApp(
ui = basicPage( actionButton("go", "Go")),
server = function(input, output, session) {
observeEvent(input$go, {
print(paste("This will only be printed once; all",
"subsequent button clicks won't do anything"))
}, once = TRUE)
}
)
runApp()
source('~/.active-rstudio-document', echo=TRUE)
runApp()
runApp()
runApp()
runApp()
searchInput
runApp()
runApp()
covid_data$areaTree
covid_data$showAddSwitch
covid_data$isShowAdd
covid_data$areaTree
runApp()
runApp()
global %>% bind_rows(chinese)
runApp()
library(tidyverse)
library(shiny)
library(shinydashboardPlus)
library(shinydashboard)
library(shinyWidgets)
covid_data <- nCov2019::get_nCov2019()
chinese <- covid_data[]
global <- covid_data$global
?dashboardPagePlus()
dashboardHeaderPlus()
?dashboardHeaderPlus()
?dashboardUser()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dashboardUser
runApp()
runApp()
runApp()
library(echarts4r)
install.packages("echarts4r.maps")
remotes::install_github('JohnCoene/echarts4r.maps')
remotes::install_github('JohnCoene/echarts4r.maps')
remotes::install_github('JohnCoene/echarts4r.maps')
remotes::install_github('JohnCoene/echarts4r.maps')
remotes::install_github('JohnCoene/echarts4r.maps')
remotes::install_github('JohnCoene/echarts4r.maps')
devtools::install_github('JohnCoene/echarts4r.maps')
remotes::install_github('JohnCoene/echarts4r.maps')
remotes::install_github('JohnCoene/echarts4r.maps')
remotes::install_github('JohnCoene/echarts4r.maps')
remotes::install_github('JohnCoene/echarts4r.maps')
remotes::install_github('JohnCoene/echarts4r.maps')
remotes::install_github('JohnCoene/echarts4r.maps')
remotes::install_github('JohnCoene/echarts4r.maps')
install.packages("firebase")
firebase::create_config(api_key = "AIzaSyB4OhA61XcNgpUL1TJDzQkjJDNc7h1htG4",project_id = "practical-teaching")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
firebase::create_config(api_key = "AIzaSyB4OhA61XcNgpUL1TJDzQkjJDNc7h1htG4",project_id = "practical-teaching")
firebase::create_config(api_key = "AIzaSyB4OhA61XcNgpUL1TJDzQkjJDNc7h1htG4",project_id = "practical-teaching")
source('~/.active-rstudio-document', echo=TRUE)
getwd()
runApp()
runApp()
?firebase::create_config
firebase::create_config(api_key = "AIzaSyB4OhA61XcNgpUL1TJDzQkjJDNc7h1htG4",project_id = "practical-teaching",auth_domain = "127.0.0.1")
runApp()
source('~/.active-rstudio-document', echo=TRUE)
firebase::create_config(api_key = "AIzaSyB4OhA61XcNgpUL1TJDzQkjJDNc7h1htG4",project_id = "practical-teaching",auth_domain = "localhost",overwrite = T)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
firebase::create_config(api_key = "AIzaSyB4OhA61XcNgpUL1TJDzQkjJDNc7h1htG4",project_id = "practical-teaching",auth_domain = "127.0.0.1",overwrite = T)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
runApp()
runApp()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
runApp()
?reqSignin
runApp()
remotes::install_github("datastorm-open/shinymanager")
remotes::install_github("paulc91/shinyauthr")
library(shinymanager)
runApp()
credentials <- data.frame(
user = c("Liripo"), # mandatory
password = c("123"), # mandatory
start = c("2020-07-02"),
expire = c( "2021-12-31"),
admin = c(T),
comment = "Simple and secure authentification mechanism
for single ‘Shiny’ applications.",
stringsAsFactors = FALSE
)
credentials
credentials$comment
check_credentials
shinymanager:::check_credentials_df
secure_server
secure_app
dashboardPagePlus()
dashboardPagePlus
#-------------
#ui
#-------------
ui <- dashboardPagePlus(
skin = "yellow-light",
enable_preloader = T,#加载
loading_duration = 1,
header = dashboardHeaderPlus(
#添加标题隐藏后显示图片
title = tagList(tags$span("Practical-teaching",class = "logo-lg"),
tags$img(src = "ShinyDashboardPlus_FINAL.svg"))
),
#---------
sidebar = dashboardSidebar(
sidebarMenu(
menuItem("Search",tabName = "search",icon = icon("search")),
menuItem("File",tabName = "file",icon = icon("file"))
)
),
#-------------
body = dashboardBody(
tabItems(
tabItem(
"search",
fluidRow(
shinyWidgets::searchInput(inputId = "search",btnSearch = icon("search"),
width = "30%"),
),
fluidRow(
DT::DTOutput("search_out"),
),
fluidRow(
echarts4rOutput("global_map")
)
),
tabItem(
"file",
fluidRow(
fileInput("file_input",label = "File input")
),
fluidRow(
boxPlus(
title = "file input and down",
closable = TRUE,
enable_label = TRUE,
label_text = 1,
label_status = "danger",
status = "warning",
solidHeader = FALSE,
collapsible = TRUE,
tableOutput("file_out"),
downloadBttn("down_out")
)
)
)
)
),
)
print(ui)
#验证后登录
ui <- secure_app(ui)
print(ui)
?HTNL
?HTML
readr::read_lines("R/global.R")
readr::read_lines("R/global.R")->a
a
readr::read_lines_raw("R/global.R")->a
a
readr::read_lines_chunked("R/global.R")
readr::read_lines("R/global.R") %>% paste0(collapse = "\n")
readr::read_lines("R/global.R") %>% paste0(collapse = "\n") %>% cat()
readr::read_lines("R/global.R") %>% paste0(collapse = "\n")->a
a
cat(a)
mypsql <- DBI::dbConnect(RPostgreSQL::PostgreSQL(),
dbname = "mypsql",
user = "liripo",
password = rstudioapi::askForPassword("Database password")
)
mypsql <- DBI::dbConnect(RPostgreSQL::PostgreSQL(),
dbname = "mypsql",
user = "liripo",
password = rstudioapi::askForPassword("Database password")
)
dbListTables(mypsql)
character(0)
library(DBI)
dbListTables(mypsql)
character(0)
#
dbWriteTable(mypsql,"credentials",credentials)
dbListTables(mypsql)
character(0)
credentials <- tbl(mypsql,"credentials")
credentials
credentials %>% as.data.frame()
credentials %>% as.data.frame()
credentials
credentials$comment
credentials %>% select(comment)
credentials %>% mutate(comment = "Simple")
credentials %>% mutate(comment = "Sample")
credentials %>% collect()
credentials %>% collect() %>% select(last_col())
credentials %>% collect() %>% tail()
credentials %>% tail()
credentials <- credentials %>% collect() %>% as.data.frame()
credentials %>% show_query()
credentials <- tbl(mypsql,"credentials")
credentials %>% show_query()
con <- DBI::dbConnect(RPostgreSQL::PostgreSQL(),
dbname = "mypsql",
user = "liripo",
password = "liripo"
)
credentials <- tbl(con,"credentials")
dbListFields(con, "mtcars")
dbReadTable(con, "mtcars")
res <- dbSendQuery(con, "SELECT * FROM mtcars WHERE cyl = 4")
while(!dbHasCompleted(res)){
chunk <- dbFetch(res, n = 5)
print(nrow(chunk))
}
res
chunk
chunk %>% class()
#show_query可以展示所使用的sql语句
#断开连接，虽然退出R会自动退出，但还是务必显示退出
dbDisconnect(con)
credentials <- tbl(con,"credentials")
runApp()
create_db
?create_db
library(keyring)
install.packages("keyring")
library(keyring)
key_set("Liripo")
key_get("Liripo")
key_list()
key_get_raw()
key_get_raw("Liripo")
con <- DBI::dbConnect(RPostgreSQL::PostgreSQL(),
dbname = "mypsql",
user = "liripo",
password = "liripo"
)
credentials <- tbl(con,"credentials")
#collect会将数据从数据库转成R对象，从而可以使用R的其他函数进行编程，但这会降低数据库
#性能，所以可以使用dplyr操作或者使用sql语句操作后再collect到本地
credentials <- credentials %>% collect() %>% as.data.frame()
create_db(
credentials_data = credentials,
sqlite_path = "D:\\postgresql\\data", # will be created
passphrase = key_get("R-shinymanager-key", "obiwankenobi")
)
create_db(
credentials_data = credentials,
sqlite_path = "D:\\postgresql\\bin", # will be created
passphrase = key_get("R-shinymanager-key", "obiwankenobi")
)
RSQLite::dbConnect
c <- DBI::dbConnect(RSQLite::dbConnect())
create_db(
credentials_data = credentials,
sqlite_path = "D:\\SQLite", # will be created
passphrase = key_get("Liripo")
)
library(DBI)
library(sqldf)
install.packages("sqldf")
drv <- dbDriver("SQLite")
con <- dbConnect(drv, dbname = "database.sqlite")
con
create_db(
credentials_data = credentials,
sqlite_path = "G:\\liripo\\R\\Practical-teaching", # will be created
passphrase = key_get("Liripo")
)
create_db(
credentials_data = credentials,
sqlite_path = "G:\\liripo\\R\\Practical-teaching\\database.sqlite", # will be created
passphrase = key_get("Liripo")
)
runApp()
runApp()
credentials
key_get("Liripo")
con <- dbConnect(drv, dbname = "database.sqlite")
con
con %>% collect()
con %>% tbl()
con %>% tbl("credentials")
con %>% tbl("credentials") %>% collect()
con %>% tbl("credentials") %>% collect() %>% .[[1]]
credentials <- data.frame(
user = c("liripo"),
password = c("liripo"),
admin = TRUE,
stringsAsFactors = FALSE
)
# you can use keyring package to set database key
library(keyring)
key_set("liripo")
create_db(
credentials_data = credentials,
sqlite_path = "G:\\liripo\\R\\Practical-teaching\\database.sqlite", # will be created
passphrase = key_get("Liripo")
)
create_db(
credentials_data = credentials,
sqlite_path = "G:\\liripo\\R\\Practical-teaching\\database.sqlite", # will be created
passphrase = key_get("liripo")
)
runApp()
runApp()
#credentials <- tbl(con,"credentials")
#collect会将数据从数据库转成R对象，从而可以使用R的其他函数进行编程，但这会降低数据库
#性能，所以可以使用dplyr操作或者使用sql语句操作后再collect到本地
#credentials <- credentials %>% collect() %>% as.data.frame()
#show_query可以展示所使用的sql语句
#断开连接，虽然退出R会自动退出，但还是务必显示退出
#dbDisconnect(con)
#-------------------------
#暂时不用了，使用sqllite生成的.sqlite文件
library(DBI)
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = ":memory:")
dbListTables(con)
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = "database.sqlite")
con
con %>% dbListTables()
credentials <- read_db_decrypt(conn = con,
name = "credentials", passphrase = "supersecret")
credentials <- read_db_decrypt(conn = con,
name = "credentials", passphrase = key_get("liripo"))
credentials
runApp()
conn <- DBI::dbConnect(RSQLite::SQLite(), dbname = "database.sqlite")
current_user <- read_db_decrypt(
conn,
name = "credentials",
passphrase = key_get("liripo")
)
current_user
check_credentials
credentials <- read_db_decrypt(conn = con,
name = "credentials", passphrase = key_get("liripo"))
credentials <- read_db_decrypt(conn = conn,
name = "credentials", passphrase = key_get("liripo"))
credentials
?check_credentials
runApp()
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
remotes::install_github("datastorm-open/shinymanager")
remotes::install_github("datastorm-open/shinymanager")
