menuItem("File",tabName = "file",icon = icon("file"))
)
),
#-------------
body = dashboardBody(
tabItems(
tabItem(
"search",
fluidRow(
shinyWidgets::searchInput(inputId = "search",btnSearch = icon("search"),
width = "30%"),
),
fluidRow(
DT::DTOutput("search_out"),
),
fluidRow(
echarts4rOutput("global_map")
)
),
tabItem(
"file",
fluidRow(
fileInput("file_input",label = "File input")
),
fluidRow(
boxPlus(
title = "file down",
closable = TRUE,
enable_label = TRUE,
label_text = 1,
label_status = "danger",
status = "warning",
solidHeader = FALSE,
collapsible = TRUE,
tableOutput("file_out"),
downloadBttn("down_out")
)
)
)
)
),
)
print(ui)
runApp()
runApp()
runApp()
#-------------
#ui
#-------------
ui <- dashboardPagePlus(
tags$header(
tags$style(type = "text/css",`font-family` = "黑体 !important;")),
skin = "yellow",
enable_preloader = T,#加载
loading_duration = 1,
header = dashboardHeaderPlus(
#添加标题隐藏后显示图片
title = tagList(tags$span("Practical-teaching",class = "logo-lg"),
tags$img(src = "ShinyDashboardPlus_FINAL.svg"))
),
#---------
sidebar = dashboardSidebar(
sidebarMenu(
menuItem("Search",tabName = "search",icon = icon("search")),
menuItem("File",tabName = "file",icon = icon("file"))
)
),
#-------------
body = dashboardBody(
tabItems(
tabItem(
"search",
fluidRow(
shinyWidgets::searchInput(inputId = "search",btnSearch = icon("search"),
width = "30%"),
),
fluidRow(
DT::DTOutput("search_out"),
),
fluidRow(
echarts4rOutput("global_map")
)
),
tabItem(
"file",
fluidRow(
fileInput("file_input",label = "File input")
),
fluidRow(
boxPlus(
title = "file down",
closable = TRUE,
enable_label = TRUE,
label_text = 1,
label_status = "danger",
status = "warning",
solidHeader = FALSE,
collapsible = TRUE,
tableOutput("file_out"),
downloadBttn("down_out")
)
)
)
)
),
)
print(ui)
fluidPage()
runApp()
runApp()
runApp()
runApp()
runApp()
dashboardHeaderPlus
?dashboardHeaderPlus
runApp()
runApp()
runApp()
font_files() %>% as_tibble()
font_files() %>% as_tibble() %>% .[[2]]
font_files() %>% as_tibble() %>% .[[3]]
runApp()
print(ui)
runApp()
runApp()
runApp()
runApp()
font_files() %>% as_tibble() %>% .[[3]]
runApp()
font_files() %>% as_tibble() %>% .[[3]] %>% head()
runApp()
runApp()
font_files() %>% as_tibble() %>% .[[3]] %>% head()
font_files() %>% as_tibble() %>% .[[3]]
runApp()
runApp()
runApp()
#加入字体，需要时可以加入谷歌字体或则字体放入本地
#加入未来荧黑字体，可商用
font_paths("./tff/")
font_files() %>% as_tibble() %>% .[[3]]
runApp()
glue("点击搜索按钮一下({href})")
library(glue)
glue("点击搜索按钮一下({href})")
href <- a(href = "https://github.com/welai/glow-sans","未来荧黑")
href
runApp()
a(href)
glue("点击搜索按钮一下({href})")
h1(glue("点击搜索按钮一下({href})"))
h1(glue("点击搜索按钮一下{href}"))
glue("点击搜索按钮一下{href}")
glue("点击搜索按钮一下{href}") %>% h1()
h1("a<>")
h1('a<>')
h1('a\\<\\>')
"<"
"<>"
"<>" %>% h1()
utf8::as_utf8("<")
"<>" %>% h1() %>% utf8::as_utf8()
"<>" %>% h1() %>% utf8::output_utf8()
?utf8::output_utf8()
cat("UTF8:", output_utf8(), "\n")
library(utf8)
cat("UTF8:", output_utf8(), "\n")
cat("UTF8:", output_ansi(), "\n")
?utf8_encode
utf8_encode("<>")
utf8_encode(".")
utf8_encode(".\")
""
""
x <- c("fa\u00E7ile", "fa\xE7ile", "fa\xC3\xA7ile")
Encoding(x) <- c("UTF-8", "UTF-8", "bytes")
x
utf8_encode(x)
tf8_encode("hello\nstyled\\world", escapes = "1")
utf8_encode("hello\nstyled\\world", escapes = "1")
h1('a<>')
h1('a<>') %>% utf8_encode()
h1('a<>') %>% class()
#-------------
#ui
#-------------
ui <- dashboardPagePlus(
skin = "blue",
enable_preloader = T,#加载
loading_duration = 1,
header = dashboardHeaderPlus(
#添加标题隐藏后显示图片
title = tagList(tags$span("Practical-teaching",class = "logo-lg"),
tags$img(src = "ShinyDashboardPlus_FINAL.svg"))
),
#---------
sidebar = dashboardSidebar(
sidebarMenu(
menuItem("Search",tabName = "search",icon = icon("search")),
menuItem("File",tabName = "file",icon = icon("file"))
)
),
#-------------
body = dashboardBody(
tabItems(
tabItem(
"search",
fluidRow(
h1("点击搜索按钮一下",a(href = "https://github.com/welai/glow-sans","未来荧黑")),
shinyWidgets::searchInput(inputId = "search",btnSearch = icon("search"),
width = "30%"),
),
fluidRow(
DT::DTOutput("search_out"),
),
fluidRow(
echarts4rOutput("global_map")
)
),
tabItem(
"file",
fluidRow(
h1("file input"),
fileInput("file_input",label = "File input")
),
fluidRow(
boxPlus(
title = "file download",
closable = TRUE,
enable_label = TRUE,
label_text = 1,
label_status = "danger",
status = "warning",
solidHeader = FALSE,
collapsible = TRUE,
tableOutput("file_out"),
downloadBttn("down_out")
)
)
)
)
),
)
h1("点击搜索按钮一下",a(href = "https://github.com/welai/glow-sans","未来荧黑"))
runApp()
runApp()
h1("<>")
h1("<a>")
h1("<a>")
h1("\<>")
h1("\\<>")
h1('\\<>')
h1(r'\\<>')
h1('\\<>')
h1('\\<\\>')
h1('\<\>')
h1('\\<\>')
h1('\\<\\>')
HTML("<>")
HTML("<>") %>% class()
runApp()
source('D:/liripo/R/Practical-teaching/R/global.R', encoding = 'UTF-8', echo=TRUE)
runApp()
runApp()
runApp()
runApp()
icon("package")
icon("module")
runApp()
runApp()
renderDataTable
?style
htmltools::tags$style
?htmltools::tags$style
boxPlus
tags$style(type = "text/css",
"h1{font-family:Glow Sans SC !important;font-weight:bold;}")
dashboardBadge
dashboardBody
runApp()
runApp()
runApp()
runApp()
div(ui,tags$style(type = "text/css",`font-family` = "Glow Sans SC",
`font-weight` = "bold !important")
)
runApp()
runApp()
dashboardFooter
runApp()
tags$style(type = "text/css",`font-family` = "Glow Sans SC !important",
`font-weight` = "bold !important")
?div
doc <- tags$html(
tags$head(
tags$title('My first page')
),
tags$body(
h1('My first heading'),
p('My first paragraph, with some ',
strong('bold'),
' text.'),
div(id='myDiv', class='simpleDiv',
'Here is a div with some attributes.')
)
)
doc
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ll
font_families()
font_files()
font_files() %>% .[[3]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?font_add_google
runApp()
font_add_google(name = "ZCOOL QingKe HuangYou",family = "zcool")
font_families_google()
font_files() %>% .[[3]]
runApp()
runApp()
runApp()
runApp()
font_files() %>% .[[3]]
font_files() %>% names()
tags$style(type = "text/css",
"h1{font-family:Glow Sans SC Normal !important}")
tags$style(type = "text/css",
"h1{font-family:'Glow Sans SC Normal' !important}")
tags$style(type = "text/css",
'h1{font-family:"Glow Sans SC Normal" !important}')
runApp()
font_files() %>% .[[3]]
runApp()
runApp()
h1(class = "a","a")
runApp()
runApp()
?print
print("a","b")
runApp()
globL
global
runApp()
runApp()
runApp()
#library(reactlog) #响应图调试
#-------------------------
covid_data <- nCov2019::get_nCov2019(lang = "en")
chinese <- covid_data[]
global <- covid_data$global
global
cns <- countrycode::codelist$country.name.en
global_map <- function(data){
cns <- countrycode::codelist$country.name.en
cns <- data.frame(countrys = cns)
cns <- cns %>% left_join(data %>% select(1:2),by = c("countrys" = "name"))
cns %>%
e_charts(countrys) %>%
e_map(confirm) %>%
e_visual_map(confirm)
}
global_map(data = chinese)
chinese
chinese %>% names()
runApp()
global_map <- function(data){
cns <- countrycode::codelist$country.name.en
cns <- data.frame(countrys = cns)
cns <- cns %>% left_join(data,by = c("countrys" = "name"))
cns %>%
e_charts(countrys) %>%
e_map(confirm) %>%
e_visual_map(confirm)
}
global_map(data = chinese)
chinese
chinese %>% as_tibble()
global %>% as_tibble()
global_map(data = global)
runApp()
runApp()
runApp()
runApp()
global %>%
filter(name == input$search)
runApp()
DT::datatable(global,style = "bootstrap4")
runApp()
shiny::runApp()
#library(reactlog) #响应图调试
#-------------------------
covid_data <- nCov2019::get_nCov2019(lang = "en")
runApp()
runApp()
icon("r")
icon("eidor")
icon("ll")
?icon
icon("feather-alt")
icon("feather-alt",class = "bg-success")
icon("feather-alt",class = "btn-primary")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp(system.file("examples/06-autocomplete", package="shinyAce"))
library(shinyAce)
library(ggcor)
x <- rand_dataset(7,col.names = paste0("X",1:7),obs = 100)
Y <- rand_dataset(3,col.names = paste0("y",1:3),obs = 100)
corrxy <- correlate(x,y)
Y <- rand_dataset(3,col.names = paste0("y",1:3),obs = 100)
corrxy <- correlate(x,y)
x <- rand_dataset(7,col.names = paste0("x",1:7),obs = 100)
y <- rand_dataset(3,col.names = paste0("y",1:3),obs = 100)
corrxy <- correlate(x,y)
corrxy %>% cor_tbl(cluster = T)
?cor_tbl
corrxy %>% cor_tbl(corrxy$r,cluster = T) %>%
quickcor() %>% geom_circle2()
corrxy %>% cor_tbl(corrxy$r,cluster = T)
cor_tbl(corrxy$r,cluster = T) %>%
quickcor() %>% geom_circle2()
cor_tbl(corrxy$r,cluster = T) %>%
quickcor() +geom_circle2()
cor_tbl(corrxy$r,cluster = T) %>%
quickcor() +geom_circle2() + scale_fill_grey()
cor_tbl(corrxy$r,cluster = T) %>%
quickcor() +geom_circle2() + scale_fill_discrete()
scale_fill_discrete()
?scale_fill_discrete()
cor_tbl(corrxy$r,cluster = T) %>%
quickcor() +geom_circle2() + scale_fill_discrete()
set_scale
cor_tbl(corrxy$r,cluster = T) %>%
quickcor() +geom_circle2() + scale_fill_gradient()
cor_tbl(corrxy$r,cluster = T) %>%
quickcor() +geom_circle2() + scale_fill_gradient2n(pal = "grey60")
cor_tbl(corrxy$r,cluster = T) %>%
quickcor() +geom_circle2() + scale_fill_gradient2n(colors = "grey60")
cor_tbl(corrxy$r,cluster = T) %>%
quickcor() +geom_circle2() + scale_fill_gradient2n(colors = "grey50")
red_blue
cor_tbl(corrxy$r,cluster = T) %>%
quickcor() +geom_circle2() + scale_fill_gradient(pal = RColorBrewer::brewer.pal(11, "RdBu"))
cor_tbl(corrxy$r,cluster = T) %>%
quickcor() +geom_circle2() + scale_fill_gradient2n(colors =RColorBrewer::brewer.pal(11, "RdBu"))
shiny::runApp(system.file("examples/06-autocomplete", package="shinyAce"))
?aceEditor
shiny::runApp(system.file("examples/06-autocomplete", package="shinyAce"))
shiny::runApp(system.file("examples/06-autocomplete", package="shinyAce"))
runApp()
runApp()
runApp()
covid_data
covid_data$global
runApp()
runApp()
shiny::runApp(system.file("examples/02-eval", package="shinyAce"))
runApp()
runApp()
shiny::runApp(system.file("examples/02-eval", package="shinyAce"))
runApp()
runApp()
runApp()
value <- read_lines("./data/ggcor.R")
value
value %>% nrow()
value %>% length()
runApp()
runApp()
getAceThemes()
runApp()
shinydashboardPlus::shinydashboardPlusGallery()
shiny::runApp(system.file("examples/06-autocomplete", package="shinyAce"))
runApp('D:/liripo/R/Practical-teaching')
shiny::runApp(system.file("examples/06-autocomplete", package="shinyAce"))
#--------------------
ror <- aceAutocomplete("r-or")
?ror$resume()
?aceAutocomplete
shiny::runApp(system.file("examples/06-autocomplete", package="shinyAce"))
runApp()
shiny::runApp(system.file("examples/06-autocomplete", package="shinyAce"))
runApp()
runApp()
value <- read_lines("./data/ggcor.R")
value
value <- read_lines("./data/ggcor.R")
value
shiny::runApp(system.file("examples/06-autocomplete", package="shinyAce"))
runApp()
runApp()
runApp()
runApp()
runApp()
